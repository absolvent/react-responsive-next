{"version":3,"sources":["../src/components.js"],"names":["MediaQueryWrapper","props","children","other","values","deviceWidth","fakeWidth","width","propTypes","oneOfType","node","func","component","string","dispatch","isRequired","number","defaultProps","responsiveWrapper","p","media","PhoneScreen","query","phone","mediaQuery","TabletScreen","tablet","DesktopAndUpScreen","desktop","PhoneAndTabletScreen","TabletAndUpScreen"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEO,IAAMA,oBAAoB,SAApBA,iBAAoB,GAAgB;AAAA,MAAfC,KAAe,uEAAP,EAAO;AAAA,MAEvCC,QAFuC,GAEhBD,KAFgB,CAEvCC,QAFuC;AAAA,MAE1BC,KAF0B,0CAEhBF,KAFgB;AAG/C,MAAMG,SAAS;AAAEC,iBAAaL,kBAAkBM,SAAjC;AAA4CC,WAAOP,kBAAkBM;AAArE,GAAf;AACA,SACE,kFAAgBH,KAAhB,EAA2B;AAAEC;AAAF,GAA3B,GACGF,QADH,CADF;AAKD,CATM;;;AAWPF,kBAAkBQ,SAAlB,GAA8B;AAC5BN,YAAU,mBAAUO,SAAV,CAAoB,CAAC,mBAAUC,IAAX,EAAiB,mBAAUC,IAA3B,CAApB,CADkB;AAE5BC,aAAW,mBAAUH,SAAV,CAAoB,CAAC,mBAAUC,IAAX,EAAiB,mBAAUC,IAA3B,EAAiC,mBAAUE,MAA3C,CAApB,CAFiB;AAG5BC,YAAU,mBAAUH,IAAV,CAAeI,UAHG;AAI5BT,aAAW,mBAAUU,MAAV,CAAiBD;AAJA,CAA9B;AAOAf,kBAAkBiB,YAAlB,GAAiC;AAC/Bf,YAAU,IADqB;AAE/BU,aAAW;AAFoB,CAAjC;;AAKO,IAAMM,oBAAoB,SAApBA,iBAAoB;AAAA,MAACjB,KAAD,uEAAS,EAAT;AAAA,SAAiB;AAAA,WAAKD,6CAAuBC,KAAvB,EAAiCkB,CAAjC,EAAL;AAAA,GAAjB;AAAA,CAA1B;;;AAEP,IAAMC,QAAQ,2CAAd;AAEO,IAAMC,cAAcH,kBAAkB;AAAEI,SAAOF,MAAMG,KAAN,CAAYC;AAArB,CAAlB,CAApB;;AACA,IAAMC,eAAeP,kBAAkB;AAAEI,SAAOF,MAAMM,MAAN,CAAaF;AAAtB,CAAlB,CAArB;;AACA,IAAMG,qBAAqBT,kBAAkB;AAAEI,SAAOF,MAAMQ,OAAN,CAAcJ;AAAvB,CAAlB,CAA3B;;AACA,IAAMK,uBAAuBX,kBAAkB;AAAEI,+BAAsB,sBAAYM,OAAZ,GAAsB,CAA5C;AAAF,CAAlB,CAA7B;;AACA,IAAME,oBAAoBZ,kBAAkB;AAAEI,+BAAsB,sBAAYI,MAAlC;AAAF,CAAlB,CAA1B","file":"components.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport MediaQuery from 'react-responsive'\nimport { breakPoints } from './defaults'\nimport { getMedia } from './media'\n\nexport const MediaQueryWrapper = (props = {}) => {\n  // eslint-disable-next-line no-unused-vars\n  const { children, ...other } = props;\n  const values = { deviceWidth: MediaQueryWrapper.fakeWidth, width: MediaQueryWrapper.fakeWidth };\n  return (\n    <MediaQuery {...other} {...{ values }} >\n      {children}\n    </MediaQuery>\n  )\n};\n\nMediaQueryWrapper.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  component: PropTypes.oneOfType([PropTypes.node, PropTypes.func, PropTypes.string]),\n  dispatch: PropTypes.func.isRequired,\n  fakeWidth: PropTypes.number.isRequired,\n};\n\nMediaQueryWrapper.defaultProps = {\n  children: null,\n  component: 'div',\n};\n\nexport const responsiveWrapper = (props = {}) => (p => MediaQueryWrapper({ ...props, ...p }));\n\nconst media = getMedia(breakPoints);\n\nexport const PhoneScreen = responsiveWrapper({ query: media.phone.mediaQuery });\nexport const TabletScreen = responsiveWrapper({ query: media.tablet.mediaQuery });\nexport const DesktopAndUpScreen = responsiveWrapper({ query: media.desktop.mediaQuery });\nexport const PhoneAndTabletScreen = responsiveWrapper({ query: `(max-width: ${breakPoints.desktop - 1}px)` });\nexport const TabletAndUpScreen = responsiveWrapper({ query: `(min-width: ${breakPoints.tablet}px)` });\n"]}