{"version":3,"sources":["../src/components.js"],"names":["MediaQueryWrapper","props","children","other","values","deviceWidth","fakeWidth","width","propTypes","oneOfType","node","func","component","string","dispatch","isRequired","number","defaultProps","responsiveWrapper","p","TestScreen","query","XsScreen","maxWidth","sm","SmScreen","md","MdScreen","lg","LgScreen","XsScreenHidden","minWidth","SmScreenHidden","MdScreenHidden","LgScreenHidden","DesktopScreen","MobileScreen"],"mappings":";;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AAEO,IAAMA,oBAAoB,SAApBA,iBAAoB,GAAgB;AAAA,MAAfC,KAAe,uEAAP,EAAO;AAAA,MAEvCC,QAFuC,GAEhBD,KAFgB,CAEvCC,QAFuC;AAAA,MAE1BC,KAF0B,0CAEhBF,KAFgB;AAG/C,MAAMG,SAAS;AAAEC,iBAAa,yBAAWC,SAA1B;AAAqCC,WAAO,yBAAWD;AAAvD,GAAf;AACA,SACE,kFAAgBH,KAAhB,EAA2B;AAAEC;AAAF,GAA3B,GACGF,QADH,CADF;AAKD,CATM;;;AAWP,yBAAWI,SAAX,GAAuB,CAAvB;AAEAN,kBAAkBQ,SAAlB,GAA8B;AAC5BN,YAAU,mBAAUO,SAAV,CAAoB,CAAC,mBAAUC,IAAX,EAAiB,mBAAUC,IAA3B,CAApB,CADkB;AAE5BC,aAAW,mBAAUH,SAAV,CAAoB,CAAC,mBAAUC,IAAX,EAAiB,mBAAUC,IAA3B,EAAiC,mBAAUE,MAA3C,CAApB,CAFiB;AAG5BC,YAAU,mBAAUH,IAAV,CAAeI,UAHG;AAI5BT,aAAW,mBAAUU,MAAV,CAAiBD;AAJA,CAA9B;AAOAf,kBAAkBiB,YAAlB,GAAiC;AAC/Bf,YAAU,IADqB;AAE/BU,aAAW;AAFoB,CAAjC;;AAKO,IAAMM,oBAAoB,SAApBA,iBAAoB;AAAA,MAACjB,KAAD,uEAAS,EAAT;AAAA,SAAiB;AAAA,WAAKD,6CAAuBC,KAAvB,EAAiCkB,CAAjC,EAAL;AAAA,GAAjB;AAAA,CAA1B;;;AAGA,IAAMC,aAAapB,kBAAkB;AAAEqB,SAAO;AAAT,CAAlB,CAAnB;;AACA,IAAMC,WAAWJ,kBAAkB;AAAEK,YAAU,sBAAYC,EAAZ,GAAiB;AAA7B,CAAlB,CAAjB;;AACA,IAAMC,WAAWP,kBAAkB;AAAEG,+BAAsB,sBAAYG,EAAlC,iCAA2D,sBAAYE,EAAZ,GAAiB,CAA5E;AAAF,CAAlB,CAAjB;;AACA,IAAMC,WAAWT,kBAAkB;AAAEG,+BAAsB,sBAAYK,EAAlC,iCAA2D,sBAAYE,EAAZ,GAAiB,CAA5E;AAAF,CAAlB,CAAjB;;AACA,IAAMC,WAAWX,kBAAkB;AAAEG,+BAAsB,sBAAYO,EAAlC;AAAF,CAAlB,CAAjB;;AAEA,IAAME,iBAAiBZ,kBAAkB;AAAEa,YAAU,sBAAYP;AAAxB,CAAlB,CAAvB;;AACA,IAAMQ,iBAAiBd,kBAAkB;AAAEG,+BAAsB,sBAAYG,EAAZ,GAAiB,CAAvC,8BAA4D,sBAAYE,EAAxE;AAAF,CAAlB,CAAvB;;AACA,IAAMO,iBAAiBf,kBAAkB;AAAEG,+BAAsB,sBAAYK,EAAZ,GAAiB,CAAvC,8BAA4D,sBAAYE,EAAxE;AAAF,CAAlB,CAAvB;;AACA,IAAMM,iBAAiBhB,kBAAkB;AAAEK,YAAU,sBAAYK,EAAZ,GAAiB;AAA7B,CAAlB,CAAvB;;AAIA,IAAMO,gBAAgBjB,kBAAkB;AAAEa,YAAU,sBAAYL;AAAxB,CAAlB,CAAtB;;AACA,IAAMU,eAAelB,kBAAkB;AAAEK,YAAU,sBAAYG,EAAZ,GAAiB;AAA7B,CAAlB,CAArB","file":"components.js","sourcesContent":["// see also components/ScreenSize for another way to consume this data\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport MediaQuery from 'react-responsive'\nimport { breakPoints } from './defaults'\n\nexport const MediaQueryWrapper = (props = {}) => {\n  // eslint-disable-next-line no-unused-vars\n  const { children, ...other } = props;\n  const values = { deviceWidth: MediaQuery.fakeWidth, width: MediaQuery.fakeWidth };\n  return (\n    <MediaQuery {...other} {...{ values }} >\n      {children}\n    </MediaQuery>\n  )\n}\n\nMediaQuery.fakeWidth = 0;\n\nMediaQueryWrapper.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  component: PropTypes.oneOfType([PropTypes.node, PropTypes.func, PropTypes.string]),\n  dispatch: PropTypes.func.isRequired,\n  fakeWidth: PropTypes.number.isRequired,\n};\n\nMediaQueryWrapper.defaultProps = {\n  children: null,\n  component: 'div',\n};\n\nexport const responsiveWrapper = (props = {}) => (p => MediaQueryWrapper({ ...props, ...p }));\n\n\nexport const TestScreen = MediaQueryWrapper({ query: '(max-width: 1224px)' });\nexport const XsScreen = responsiveWrapper({ maxWidth: breakPoints.sm - 1 })\nexport const SmScreen = responsiveWrapper({ query: `(min-width: ${breakPoints.sm}px) and (max-width: ${breakPoints.md - 1}px)` })\nexport const MdScreen = responsiveWrapper({ query: `(min-width: ${breakPoints.md}px) and (max-width: ${breakPoints.lg - 1}px)` })\nexport const LgScreen = responsiveWrapper({ query: `(min-width: ${breakPoints.lg}px)` })\n\nexport const XsScreenHidden = responsiveWrapper({ minWidth: breakPoints.sm })\nexport const SmScreenHidden = responsiveWrapper({ query: `(max-width: ${breakPoints.sm - 1}px), (min-width: ${breakPoints.md}px)` })\nexport const MdScreenHidden = responsiveWrapper({ query: `(max-width: ${breakPoints.md - 1}px), (min-width: ${breakPoints.lg}px)` })\nexport const LgScreenHidden = responsiveWrapper({ maxWidth: breakPoints.lg - 1 })\n\nexport { XsScreen as PhoneScreen }\nexport { SmScreen as TabletScreen }\nexport const DesktopScreen = responsiveWrapper({ minWidth: breakPoints.md })\nexport const MobileScreen = responsiveWrapper({ maxWidth: breakPoints.md - 1 })\n\nexport { XsScreenHidden as PhoneScreenHidden }\nexport { SmScreenHidden as TabletScreenHidden }\nexport { MobileScreen as DesktopScreenHidden }\nexport { DesktopScreen as MobileScreenHidden }\n"]}