{"version":3,"sources":["../src/react-responsive-connect.js"],"names":["ReactResponsiveConnect","console","log","process","browser","window","innerWidth","document","documentElement","clientWidth","body","ReactResponsiveNextHoc","updateDeviceTypeByViewportSize","detectedMedia","mediaQueriesMatchers","forEach","mediaItem","matcher","matches","defaultWidth","save","secure","type","mediaType","media","customConfig","desktop","args","newProps","env","req","device","eval","detectedMediaType","load","detectedMediaWidth","checkEnvironment","headers","ua","detectedDevice","userAgentMediaType","getDefaultMediaWidthByType","detectedMediaModel","model","newArgs","WrappedComponent","getInitialProps","fakeWidth","props","config","mediaQuery","width","getBrowserWidth","push","state","onResize","onResizeHandler","addEventListener","removeEventListener","Component","propTypes","shape","breakPoints","any","devicesToBreakPoints","defaultProps"],"mappings":"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","file":"react-responsive-connect.js","sourcesContent":["/* global require */\n\nimport debounce from 'lodash.debounce';\nimport matchMediaQuery from 'matchmediaquery';\nimport PropTypes from 'prop-types';\nimport Cookies from 'isomorphic-cookie';\nimport React from 'react';\nimport { MediaQueryWrapper } from './components';\nimport { getMedia } from './media';\nimport { defaultConfig } from './default-config';\n\nexport const ReactResponsiveConnect = WrappedComponent =>\n  class ReactResponsiveNextHoc extends React.Component {\n\n    static customConfig = null;\n\n    static propTypes = {\n      config: PropTypes.shape({\n        breakPoints: PropTypes.any,\n        devicesToBreakPoints: PropTypes.any,\n      }),\n    };\n\n    static defaultProps = {\n      config: ReactResponsiveConnect.customConfig || defaultConfig,\n    };\n\n    static getBrowserWidth() {\n      console.log('HOC', 'getBrowserWidth');\n      if (process.browser) {\n        return window.innerWidth ||\n          document.documentElement.clientWidth ||\n          document.body.clientWidth;\n      }\n      return -1;\n    }\n\n    static onResize() {\n      console.log('HOC', 'onResize');\n      ReactResponsiveNextHoc.updateDeviceTypeByViewportSize();\n    }\n\n    static updateDeviceTypeByViewportSize() {\n      console.log('HOC', 'updateDeviceTypeByViewportSize');\n      let detectedMedia = null;\n      ReactResponsiveNextHoc.mediaQueriesMatchers.forEach((mediaItem) => {\n        if (mediaItem.matcher.matches) {\n          if (!detectedMedia\n            || (detectedMedia && detectedMedia.defaultWidth < mediaItem.defaultWidth)) {\n            detectedMedia = mediaItem;\n          }\n        }\n      });\n      Cookies.save('detectedMediaWidth', detectedMedia.defaultWidth, { secure: false });\n      Cookies.save('detectedMediaType', detectedMedia.type, { secure: false });\n    }\n\n    static getDefaultMediaWidthByType(mediaType) {\n      const media = getMedia(ReactResponsiveConnect.customConfig || defaultConfig);\n      if (media[mediaType]) {\n        return media[mediaType].defaultWidth;\n      }\n      return media.desktop.defaultWidth;\n    }\n\n    static async getInitialProps(args = {}) {\n      let newProps = {\n        env: {},\n      };\n\n      if (args && args.req) {\n        const device = eval('require(\\'device\\')'); // it's not bundled to a browser js\n        const detectedMediaType = Cookies.load('detectedMediaType', args.req);\n        const detectedMediaWidth = Cookies.load('detectedMediaWidth', args.req);\n        const checkEnvironment = ({ headers = {} } = {}) => {\n          const ua = headers['user-agent'] || headers['User-Agent'] || '';\n          const detectedDevice = device(ua);\n          return {\n            userAgentMediaType: detectedDevice.type,\n            detectedMediaType: detectedMediaType || detectedDevice.type,\n            detectedMediaWidth: detectedMediaWidth\n              || ReactResponsiveNextHoc.getDefaultMediaWidthByType(detectedDevice.type),\n            detectedMediaModel: detectedDevice.model || null,\n          }\n        };\n        newProps.env = checkEnvironment(args.req);\n      } else {\n        newProps.env = {\n          userAgentMediaType: null,\n          detectedMediaType: null,\n          detectedMediaWidth: 0,\n          detectedMediaModel: null,\n        };\n      }\n      const newArgs = {\n        ...args,\n        ...newProps,\n      };\n      if (WrappedComponent.getInitialProps) {\n        newProps = {\n          ...newProps,\n          ...await WrappedComponent.getInitialProps(newArgs),\n        };\n      }\n      MediaQueryWrapper.fakeWidth = newProps.env.detectedMediaWidth;\n      return newProps;\n    }\n\n    constructor(props) {\n      super(props);\n      console.log('HOC', 'constructor', props);\n      ReactResponsiveNextHoc.mediaQueriesMatchers = [];\n      const { config } = this.props;\n      const media = getMedia(config);\n\n      Object.keys(media).forEach((type) => {\n        const { mediaQuery, defaultWidth } = media[type];\n        const matcher = matchMediaQuery(mediaQuery, {\n          width: ReactResponsiveNextHoc.getBrowserWidth(),\n        });\n        ReactResponsiveNextHoc.mediaQueriesMatchers.push({\n          type,\n          matcher,\n          defaultWidth,\n        })\n      });\n      this.state = {\n        env: {},\n      };\n    }\n\n    componentDidMount() {\n      console.log('HOC', 'componentDidMount');\n      ReactResponsiveNextHoc.onResize();\n      this.onResizeHandler = debounce(ReactResponsiveNextHoc.onResize, 200);\n      window.addEventListener('resize', this.onResizeHandler, false);\n    }\n\n    componentWillUnmount() {\n      console.log('HOC', 'componentWillUnmount');\n      if (this.onResizeHandler) {\n        window.removeEventListener('resize', this.onResizeHandler, false);\n      }\n    }\n\n    render() {\n      console.log('HOC', 'render');\n      return <WrappedComponent {...this.state} {...this.props} />;\n    }\n  };\n"]}