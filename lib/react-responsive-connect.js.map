{"version":3,"sources":["../src/react-responsive-connect.js"],"names":["ReactResponsiveConnect","detectedMedia","ReactResponsiveNextHoc","mediaQueriesMatchers","forEach","mediaItem","matcher","matches","defaultWidth","previouslyDetectedMediaWidth","load","save","secure","type","initialWidth","window","location","reload","updateDeviceTypeByViewportSize","detectedMediaWidth","args","newProps","env","req","device","eval","detectedMediaType","checkEnvironment","headers","ua","detectedDevice","userAgentMediaType","getDefaultMediaWidthByType","detectedMediaModel","model","res","cookie","maxAge","httpOnly","newArgs","WrappedComponent","getInitialProps","fakeWidth","mediaType","media","customConfig","desktop","process","browser","innerWidth","document","documentElement","clientWidth","body","props","config","mediaQuery","width","getBrowserWidth","push","state","onResizeHandler","onResize","addEventListener","onBeforeUnload","reloadPageIfIncorrectWidthDetected","removeEventListener","Component","propTypes","shape","breakPoints","any","devicesToBreakPoints","defaultProps"],"mappings":"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","file":"react-responsive-connect.js","sourcesContent":["/* global require */\n\nimport debounce from 'lodash.debounce';\nimport matchMediaQuery from 'matchmediaquery';\nimport PropTypes from 'prop-types';\nimport Cookies from 'isomorphic-cookie';\nimport React from 'react';\nimport { MediaQueryWrapper } from './components';\nimport { getMedia } from './media';\nimport { defaultConfig } from './default-config';\n\nexport const ReactResponsiveConnect = WrappedComponent =>\n  class ReactResponsiveNextHoc extends React.Component {\n\n    static customConfig = null;\n\n    static updateDeviceTypeByViewportSize() {\n      let detectedMedia = null;\n      ReactResponsiveNextHoc.mediaQueriesMatchers.forEach((mediaItem) => {\n        if (mediaItem.matcher.matches) {\n          if (!detectedMedia\n            || (detectedMedia && detectedMedia.defaultWidth < mediaItem.defaultWidth)) {\n            detectedMedia = mediaItem;\n          }\n        }\n      });\n      const previouslyDetectedMediaWidth = Cookies.load('detectedMediaWidth');\n\n      Cookies.save('detectedMediaWidth', detectedMedia.defaultWidth, { secure: false });\n      Cookies.save('detectedMediaType', detectedMedia.type, { secure: false });\n\n      if (!previouslyDetectedMediaWidth) {\n        const initialWidth = Cookies.load('initialMediaWidth');\n        if (initialWidth !== detectedMedia.defaultWidth) {\n          window.location.reload();\n        }\n      }\n    }\n\n    static propTypes = {\n      config: PropTypes.shape({\n        breakPoints: PropTypes.any,\n        devicesToBreakPoints: PropTypes.any,\n      }),\n    };\n\n    static defaultProps = {\n      config: ReactResponsiveConnect.customConfig || defaultConfig,\n    };\n\n    static onResize() {\n      ReactResponsiveNextHoc.updateDeviceTypeByViewportSize();\n    }\n\n    static onBeforeUnload() {\n      ReactResponsiveNextHoc.updateDeviceTypeByViewportSize();\n    }\n\n    static reloadPageIfIncorrectWidthDetected() {\n      const previouslyDetectedMediaWidth = Cookies.load('detectedMediaWidth');\n      ReactResponsiveNextHoc.updateDeviceTypeByViewportSize();\n      const detectedMediaWidth = Cookies.load('detectedMediaWidth');\n      if (detectedMediaWidth !== previouslyDetectedMediaWidth) {\n        window.location.reload();\n      }\n    }\n\n    static async getInitialProps(args = {}) {\n      let newProps = {\n        env: {},\n      };\n\n      if (args && args.req) {\n        const device = eval('require(\\'device\\')'); // it's not bundled to a browser js\n        const detectedMediaType = Cookies.load('detectedMediaType', args.req);\n        const detectedMediaWidth = Cookies.load('detectedMediaWidth', args.req);\n        const checkEnvironment = ({ headers = {} } = {}) => {\n          const ua = headers['user-agent'] || headers['User-Agent'] || '';\n          const detectedDevice = device(ua);\n          return {\n            userAgentMediaType: detectedDevice.type,\n            detectedMediaType: detectedMediaType || detectedDevice.type,\n            detectedMediaWidth: detectedMediaWidth\n              || ReactResponsiveNextHoc.getDefaultMediaWidthByType(detectedDevice.type),\n            detectedMediaModel: detectedDevice.model || null,\n          }\n        };\n        newProps.env = checkEnvironment(args.req);\n        args.res.cookie('initialMediaWidth', newProps.env.detectedMediaWidth, { maxAge: 60000, httpOnly: false });\n      } else {\n        newProps.env = {\n          userAgentMediaType: null,\n          detectedMediaType: null,\n          detectedMediaWidth: 0,\n          detectedMediaModel: null,\n        };\n      }\n      const newArgs = {\n        ...args,\n        ...newProps,\n      };\n      if (WrappedComponent.getInitialProps) {\n        newProps = {\n          ...newProps,\n          ...await WrappedComponent.getInitialProps(newArgs),\n        };\n      }\n      MediaQueryWrapper.fakeWidth = newProps.env.detectedMediaWidth;\n      return newProps;\n    }\n\n    static getDefaultMediaWidthByType(mediaType) {\n      const media = getMedia(ReactResponsiveConnect.customConfig || defaultConfig);\n      if (media[mediaType]) {\n        return media[mediaType].defaultWidth;\n      }\n      return media.desktop.defaultWidth;\n    }\n\n    static getBrowserWidth() {\n      if (process.browser) {\n        return window.innerWidth ||\n          document.documentElement.clientWidth ||\n          document.body.clientWidth;\n      }\n      return -1;\n    }\n\n    constructor(props) {\n      super(props);\n\n      ReactResponsiveNextHoc.mediaQueriesMatchers = [];\n      const { config } = this.props;\n      const media = getMedia(config);\n\n      Object.keys(media).forEach((type) => {\n        const { mediaQuery, defaultWidth } = media[type];\n        const matcher = matchMediaQuery(mediaQuery, {\n          width: ReactResponsiveNextHoc.getBrowserWidth(),\n        });\n        ReactResponsiveNextHoc.mediaQueriesMatchers.push({\n          type,\n          matcher,\n          defaultWidth,\n        })\n      });\n\n      this.state = {\n        env: {},\n      };\n    }\n\n    componentDidMount() {\n      this.onResizeHandler = debounce(ReactResponsiveNextHoc.onResize, 200);\n      window.addEventListener('resize', this.onResizeHandler, false);\n      window.addEventListener('beforeunload', ReactResponsiveNextHoc.onBeforeUnload, false);\n\n      ReactResponsiveNextHoc.reloadPageIfIncorrectWidthDetected()\n    }\n\n    componentWillUnmount() {\n      if (this.onResizeHandler) {\n        window.removeEventListener('resize', this.onResizeHandler, false);\n      }\n    }\n\n    render() {\n      return <WrappedComponent {...this.state} {...this.props} />;\n    }\n  };\n"]}