{"version":3,"sources":["../src/helpers.js"],"names":["getMediaByType","mediaType","media","desktop","getMediaDefaultWidthByType","mediaItem","minWidth","getMediaMinWidthByType","getMediaMaxWidthByType","maxWidth","mediaQueryBuilder","from","to","mediaQueryParts","fromNumeric","Number","toNumeric","push","Error","TAG","join","isString","value","String","isStringOrNumber"],"mappings":";;;;;;;;;;;AAAA;;AAEA,IAAMA,iBAAiB,SAAjBA,cAAiB,CAACC,SAAD,EAAYC,KAAZ,EAAsB;AAC3C,MAAIA,MAAMD,SAAN,CAAJ,EAAsB;AACpB,WAAOC,MAAMD,SAAN,CAAP;AACD;;AACD,SAAOC,MAAMC,OAAb;AACD,CALD;;AAOO,IAAMC,6BAA6B,SAA7BA,0BAA6B,CAACH,SAAD,EAAYC,KAAZ,EAAsB;AAC9D,MAAMG,YAAYL,eAAeC,SAAf,EAA0BC,KAA1B,CAAlB;AACA,SAAOG,aAAaA,UAAUC,QAAvB,GAAkCD,UAAUC,QAA5C,GAAuD,CAAC,CAA/D;AACD,CAHM;;;;AAKA,IAAMC,yBAAyB,SAAzBA,sBAAyB,CAACN,SAAD,EAAYC,KAAZ,EAAsB;AAC1D,MAAMG,YAAYL,eAAeC,SAAf,EAA0BC,KAA1B,CAAlB;AACA,SAAOG,aAAaA,UAAUC,QAAvB,GAAkCD,UAAUC,QAA5C,GAAuD,CAAC,CAA/D;AACD,CAHM;;;;AAKA,IAAME,yBAAyB,SAAzBA,sBAAyB,CAACP,SAAD,EAAYC,KAAZ,EAAsB;AAC1D,MAAMG,YAAYL,eAAeC,SAAf,EAA0BC,KAA1B,CAAlB;AACA,SAAOG,aAAaA,UAAUI,QAAvB,GAAkCJ,UAAUI,QAA5C,GAAuD,CAAC,CAA/D;AACD,CAHM;;;;AAMA,IAAMC,oBAAoB,SAApBA,iBAAoB,CAACC,IAAD,EAAOC,EAAP,EAAc;AAC7C,MAAMC,kBAAkB,EAAxB;AACA,MAAMC,cAAcC,OAAOJ,IAAP,CAApB;AACA,MAAMK,YAAYD,OAAOH,EAAP,CAAlB;AAEA,MAAI,CAAC,oBAAaE,WAAb,CAAL,EAAgCD,gBAAgBI,IAAhB,uBAAoCN,IAApC;AAChC,MAAI,CAAC,oBAAaK,SAAb,CAAL,EAA8BH,gBAAgBI,IAAhB,uBAAoCL,EAApC;;AAE9B,MAAI,CAAC,oBAAaE,WAAb,CAAD,IAA8B,CAAC,oBAAaE,SAAb,CAA/B,IAA0DF,cAAcE,SAA5E,EAAuF;AACrF,UAAM,IAAIE,KAAJ,WAAaC,kBAAb,oBAA0BL,WAA1B,wCAAmEE,SAAnE,aAAN;AACD;;AAED,SAAOH,gBAAgBO,IAAhB,CAAqB,OAArB,CAAP;AACD,CAbM;;;;AAeA,IAAMC,WAAW,SAAXA,QAAW;AAAA,SAAU,OAAOC,KAAP,KAAiB,QAAjB,IAA6BA,iBAAiBC,MAAxD;AAAA,CAAjB;;;;AACA,IAAMC,mBAAmB,SAAnBA,gBAAmB;AAAA,SAAW,OAAOF,KAAP,KAAiB,QAAjB,IAA6BA,iBAAiBC,MAA/C,IAA0D,CAAC,oBAAaR,OAAOO,KAAP,CAAb,CAArE;AAAA,CAAzB","sourcesContent":["import { TAG } from './default-config';\n\nconst getMediaByType = (mediaType, media) => {\n  if (media[mediaType]) {\n    return media[mediaType];\n  }\n  return media.desktop;\n};\n\nexport const getMediaDefaultWidthByType = (mediaType, media) => {\n  const mediaItem = getMediaByType(mediaType, media);\n  return mediaItem && mediaItem.minWidth ? mediaItem.minWidth : -1;\n};\n\nexport const getMediaMinWidthByType = (mediaType, media) => {\n  const mediaItem = getMediaByType(mediaType, media);\n  return mediaItem && mediaItem.minWidth ? mediaItem.minWidth : -1;\n};\n\nexport const getMediaMaxWidthByType = (mediaType, media) => {\n  const mediaItem = getMediaByType(mediaType, media);\n  return mediaItem && mediaItem.maxWidth ? mediaItem.maxWidth : -1;\n};\n\n\nexport const mediaQueryBuilder = (from, to) => {\n  const mediaQueryParts = [];\n  const fromNumeric = Number(from);\n  const toNumeric = Number(to);\n\n  if (!Number.isNaN(fromNumeric)) mediaQueryParts.push(`(min-width: ${from}px)`);\n  if (!Number.isNaN(toNumeric)) mediaQueryParts.push(`(max-width: ${to}px)`);\n\n  if (!Number.isNaN(fromNumeric) && !Number.isNaN(toNumeric) && fromNumeric > toNumeric) {\n    throw new Error(`${TAG} from (${fromNumeric}) value is larger than to (${toNumeric}) value`)\n  }\n\n  return mediaQueryParts.join(' and ');\n};\n\nexport const isString = value => (typeof value === 'string' || value instanceof String);\nexport const isStringOrNumber = value => ((typeof value === 'string' || value instanceof String) || !Number.isNaN(Number(value)));\n"],"file":"helpers.js"}