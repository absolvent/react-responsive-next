{"version":3,"sources":["../src/hoc.js"],"names":["React","require","hoc","windowWidth","window","innerWidth","document","documentElement","clientWidth","body","windowHeight","innerHeight","clientHeight","console","log","a1","a2","args","newProps","env","req","device","eval","checkEnvironment","headers","ua","detectedDevice","detectedDeviceWidth","type","detectedDeviceType","detectedDeviceModel","model","detectedDeviceName","newArgs","WrappedComponent","getInitialProps","props","process","browser","isDesktop","width","addListener","ReactResponsiveNextHoc","onMediaQueryMatch","fakeWidth","state","onResize","onResizeHandler","addEventListener","removeEventListener","Component"],"mappings":"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","file":"hoc.js","sourcesContent":["/* global require */\n\nimport debounce from 'lodash.debounce';\nimport mq from 'matchmediaquery';\nimport { MediaQueryWrapper } from './components';\nimport { defaultDevicesSizes, mediaQueries } from './defaults';\n\nconst React = require('react');\n\nexport const hoc = WrappedComponent => class ReactResponsiveNextHoc extends React.Component {\n\n  static onResize() {\n    const windowWidth = window.innerWidth ||\n      document.documentElement.clientWidth ||\n      document.body.clientWidth;\n    const windowHeight = window.innerHeight ||\n      document.documentElement.clientHeight ||\n      document.body.clientHeight;\n    console.log('onResize', windowWidth, windowHeight);\n\n\n    // console.log('onResize isDesktop', isDesktop.matches);\n  }\n\n  static onMediaQueryMatch(a1, a2) {\n    console.log('onMediaQueryMatch', a1, a2);\n  }\n\n  static async getInitialProps(args = {}) {\n    let newProps = {\n      env: {},\n    };\n\n    if (args && args.req) {\n      const device = eval('require(\\'device\\')');\n\n      const checkEnvironment = ({ headers = {} } = {}) => {\n        const ua = headers['user-agent'] || headers['User-Agent'] || '';\n        const detectedDevice = device(ua);\n        const detectedDeviceWidth = defaultDevicesSizes[detectedDevice.type] || null;\n        return {\n          detectedDeviceType: detectedDevice.type,\n          detectedDeviceModel: detectedDevice.model,\n          detectedDeviceWidth,\n        }\n      };\n      newProps.env = checkEnvironment(args.req);\n    } else {\n      newProps.env = {\n        detectedDeviceType: null,\n        detectedDeviceName: null,\n        detectedDeviceWidth: null,\n      };\n    }\n    const newArgs = {\n      ...args,\n      ...newProps,\n    };\n    if (WrappedComponent.getInitialProps) {\n      newProps = {\n        ...newProps,\n        ...await WrappedComponent.getInitialProps(newArgs),\n      };\n    }\n    return newProps;\n  }\n\n  constructor(props) {\n    super(props);\n    const windowWidth = process.browser ? window.innerWidth ||\n      document.documentElement.clientWidth ||\n      document.body.clientWidth : 1;\n    const isDesktop = mq(mediaQueries.isDesktop, { width: windowWidth });\n    isDesktop.addListener(ReactResponsiveNextHoc.onMediaQueryMatch);\n    MediaQueryWrapper.fakeWidth = 1200;\n    this.state = {\n      env: {},\n    };\n  }\n\n  componentDidMount() {\n    ReactResponsiveNextHoc.onResize();\n    this.onResizeHandler = debounce(ReactResponsiveNextHoc.onResize, 200);\n    window.addEventListener('resize', this.onResizeHandler, false);\n  }\n\n  componentWillUnmount() {\n    if (this.onResizeHandler) {\n      window.removeEventListener('resize', this.onResizeHandler, false);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <WrappedComponent {...this.state} {...this.props} />;\n      </div>\n    );\n  }\n};\n"]}