{"version":3,"sources":["../src/hoc.js"],"names":["React","require","hoc","args","newProps","env","req","newArgs","WrappedComponent","getInitialProps","fakeWidth","props","state","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA,IAAMA,QAAQC,QAAQ,OAAR,CAAd;;AAGO,IAAMC,MAAM,SAANA,GAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEYC,sBAFZ,2DAEmB,EAFnB;AAGXC,0BAHW,GAGA;AACbC,yBAAK;AADQ,mBAHA;;AAOf,sBAAIF,QAAQA,KAAKG,GAAjB,EAAsB,CAErB,CAFD,MAEO,CAEN;;AACKC,yBAZS,8BAaVJ,IAbU,EAcVC,QAdU;;AAAA,uBAgBXI,iBAAiBC,eAhBN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,gCAkBRL,QAlBQ;AAAA;AAAA,yBAmBFI,iBAAiBC,eAAjB,CAAiCF,OAAjC,CAnBE;;AAAA;AAAA;AAiBbH,0BAjBa;;AAAA;AAsBf,gDAAkBM,SAAlB,GAA8B,GAA9B;AAtBe,mDAuBRN,QAvBQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2BjB,oCAAYO,KAAZ,EAAmB;AAAA;;AAAA;AACjB,mKAAMA,KAAN;AACA,YAAKC,KAAL,GAAa;AACXP,aAAK;AADM,OAAb;AAFiB;AAKlB;;AAhCgB;AAAA;AAAA,+BA6CR;AACP,eAAO,oBAAC,gBAAD,6BAAsB,KAAKO,KAA3B,EAAsC,KAAKD,KAA3C,EAAP;AACD;AA/CgB;AAAA;AAAA,IAAyDX,MAAMa,SAA/D;AAAA,CAAZ","file":"hoc.js","sourcesContent":["import { MediaQueryWrapper } from './components';\n\nconst React = require('react');\n\n\nexport const hoc = WrappedComponent => class ReactResponsiveNextHoc extends React.Component {\n\n  static async getInitialProps(args = {}) {\n    let newProps = {\n      env: {},\n    };\n\n    if (args && args.req) {\n      //  newProps.env = getVariables(args, options);\n    } else {\n      //  newProps.env = getVariables({}, options);\n    }\n    const newArgs = {\n      ...args,\n      ...newProps,\n    };\n    if (WrappedComponent.getInitialProps) {\n      newProps = {\n        ...newProps,\n        ...await WrappedComponent.getInitialProps(newArgs),\n      };\n    }\n    MediaQueryWrapper.fakeWidth = 800;\n    return newProps;\n  }\n  // constructor && componentWillMount: in case getInitialProps isn't called\n  /* istanbul ignore next */\n  constructor(props) {\n    super(props);\n    this.state = {\n      env: {},\n    };\n  }\n  /* istanbul ignore next */\n  // componentWillMount() {\n  //   if (!this.props.env) {\n  //     this.setState({\n  //       env: getVariables({}, {\n  //         ...options,\n  //         debug: false,\n  //       }),\n  //     });\n  //   }\n  // }\n  /* istanbul ignore next */\n  render() {\n    return <WrappedComponent {...this.state} {...this.props} />;\n  }\n};\n"]}