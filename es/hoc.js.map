{"version":3,"sources":["../src/hoc.js"],"names":["debounce","matchMediaQuery","PropTypes","Cookies","React","MediaQueryWrapper","getMedia","defaultConfig","hoc","process","browser","window","innerWidth","document","documentElement","clientWidth","body","ReactResponsiveNextHoc","updateDeviceTypeByViewportSize","detectedMedia","mediaQueriesMatchers","forEach","mediaItem","matcher","matches","defaultWidth","save","secure","type","mediaType","media","customConfig","desktop","args","newProps","env","req","device","eval","detectedMediaType","load","detectedMediaWidth","checkEnvironment","headers","ua","detectedDevice","userAgentMediaType","getDefaultMediaWidthByType","detectedMediaModel","model","newArgs","WrappedComponent","getInitialProps","fakeWidth","props","config","mediaQuery","width","getBrowserWidth","push","state","onResize","onResizeHandler","addEventListener","removeEventListener","Component","propTypes","shape","breakPoints","any","devicesToBreakPoints","defaultProps"],"mappings":"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","sourcesContent":["/* global require */\n\nimport debounce from 'lodash.debounce';\nimport matchMediaQuery from 'matchmediaquery';\nimport PropTypes from 'prop-types';\nimport Cookies from 'isomorphic-cookie';\nimport React from 'react';\nimport { MediaQueryWrapper } from './components';\nimport { getMedia } from './media';\nimport { defaultConfig } from './default-config';\n\nexport const hoc = WrappedComponent =>\n  class ReactResponsiveNextHoc extends React.Component {\n\n    static customConfig = null;\n\n    static propTypes = {\n      config: PropTypes.shape({\n        breakPoints: PropTypes.any,\n        devicesToBreakPoints: PropTypes.any,\n      }),\n    };\n\n    static defaultProps = {\n      config: hoc.customConfig || defaultConfig,\n    };\n\n    static getBrowserWidth() {\n      if (process.browser) {\n        return window.innerWidth ||\n          document.documentElement.clientWidth ||\n          document.body.clientWidth;\n      }\n      return -1;\n    }\n\n    static onResize() {\n      ReactResponsiveNextHoc.updateDeviceTypeByViewportSize();\n    }\n\n    static updateDeviceTypeByViewportSize() {\n      let detectedMedia = null;\n      ReactResponsiveNextHoc.mediaQueriesMatchers.forEach((mediaItem) => {\n        if (mediaItem.matcher.matches) {\n          if (!detectedMedia\n            || (detectedMedia && detectedMedia.defaultWidth < mediaItem.defaultWidth)) {\n            detectedMedia = mediaItem;\n          }\n        }\n      });\n      Cookies.save('detectedMediaWidth', detectedMedia.defaultWidth, { secure: false });\n      Cookies.save('detectedMediaType', detectedMedia.type, { secure: false });\n    }\n\n    static getDefaultMediaWidthByType(mediaType) {\n      const media = getMedia(hoc.customConfig || defaultConfig);\n      if (media[mediaType]) {\n        return media[mediaType].defaultWidth;\n      }\n      return media.desktop.defaultWidth;\n    }\n\n    static async getInitialProps(args = {}) {\n      let newProps = {\n        env: {},\n      };\n\n      if (args && args.req) {\n        const device = eval('require(\\'device\\')'); // it's not bundled to a browser js\n        const detectedMediaType = Cookies.load('detectedMediaType', args.req);\n        const detectedMediaWidth = Cookies.load('detectedMediaWidth', args.req);\n        const checkEnvironment = ({ headers = {} } = {}) => {\n          const ua = headers['user-agent'] || headers['User-Agent'] || '';\n          const detectedDevice = device(ua);\n          return {\n            userAgentMediaType: detectedDevice.type,\n            detectedMediaType: detectedMediaType || detectedDevice.type,\n            detectedMediaWidth: detectedMediaWidth\n              || ReactResponsiveNextHoc.getDefaultMediaWidthByType(detectedDevice.type),\n            detectedMediaModel: detectedDevice.model || null,\n          }\n        };\n        newProps.env = checkEnvironment(args.req);\n      } else {\n        newProps.env = {\n          userAgentMediaType: null,\n          detectedMediaType: null,\n          detectedMediaWidth: 0,\n          detectedMediaModel: null,\n        };\n      }\n      const newArgs = {\n        ...args,\n        ...newProps,\n      };\n      if (WrappedComponent.getInitialProps) {\n        newProps = {\n          ...newProps,\n          ...await WrappedComponent.getInitialProps(newArgs),\n        };\n      }\n      MediaQueryWrapper.fakeWidth = newProps.env.detectedMediaWidth;\n      return newProps;\n    }\n\n    constructor(props) {\n      super(props);\n      ReactResponsiveNextHoc.mediaQueriesMatchers = [];\n      const { config } = this.props;\n      const media = getMedia(config);\n\n      Object.keys(media).forEach((type) => {\n        const { mediaQuery, defaultWidth } = media[type];\n        const matcher = matchMediaQuery(mediaQuery, {\n          width: ReactResponsiveNextHoc.getBrowserWidth(),\n        });\n        ReactResponsiveNextHoc.mediaQueriesMatchers.push({\n          type,\n          matcher,\n          defaultWidth,\n        })\n      });\n      this.state = {\n        env: {},\n      };\n    }\n\n    componentDidMount() {\n      ReactResponsiveNextHoc.onResize();\n      this.onResizeHandler = debounce(ReactResponsiveNextHoc.onResize, 200);\n      window.addEventListener('resize', this.onResizeHandler, false);\n    }\n\n    componentWillUnmount() {\n      if (this.onResizeHandler) {\n        window.removeEventListener('resize', this.onResizeHandler, false);\n      }\n    }\n\n    render() {\n      return <WrappedComponent {...this.state} {...this.props} />;\n    }\n  };\n"],"file":"hoc.js"}