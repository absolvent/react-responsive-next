{"version":3,"sources":["../src/react-responsive-connect.js"],"names":["debounce","matchMediaQuery","PropTypes","Cookies","React","MediaQueryWrapper","getMedia","defaultConfig","ReactResponsiveConnect","detectedMedia","ReactResponsiveNextHoc","mediaQueriesMatchers","forEach","mediaItem","matcher","matches","defaultWidth","save","secure","type","props","config","media","mediaQuery","width","getBrowserWidth","push","state","env","onResize","onResizeHandler","window","addEventListener","removeEventListener","updateDeviceTypeByViewportSize","args","newProps","req","device","eval","detectedMediaType","load","detectedMediaWidth","checkEnvironment","headers","ua","detectedDevice","userAgentMediaType","getDefaultMediaWidthByType","detectedMediaModel","model","newArgs","WrappedComponent","getInitialProps","fakeWidth","mediaType","customConfig","desktop","process","browser","innerWidth","document","documentElement","clientWidth","body","Component","propTypes","shape","breakPoints","any","devicesToBreakPoints","defaultProps"],"mappings":"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","sourcesContent":["/* global require */\n\nimport debounce from 'lodash.debounce';\nimport matchMediaQuery from 'matchmediaquery';\nimport PropTypes from 'prop-types';\nimport Cookies from 'isomorphic-cookie';\nimport React from 'react';\nimport { MediaQueryWrapper } from './components';\nimport { getMedia } from './media';\nimport { defaultConfig } from './default-config';\n\nexport const ReactResponsiveConnect = WrappedComponent =>\n  class ReactResponsiveNextHoc extends React.Component {\n\n    static customConfig = null;\n\n    static updateDeviceTypeByViewportSize() {\n      let detectedMedia = null;\n      ReactResponsiveNextHoc.mediaQueriesMatchers.forEach((mediaItem) => {\n        if (mediaItem.matcher.matches) {\n          if (!detectedMedia\n            || (detectedMedia && detectedMedia.defaultWidth < mediaItem.defaultWidth)) {\n            detectedMedia = mediaItem;\n          }\n        }\n      });\n      Cookies.save('detectedMediaWidth', detectedMedia.defaultWidth, { secure: false });\n      Cookies.save('detectedMediaType', detectedMedia.type, { secure: false });\n    }\n\n    static propTypes = {\n      config: PropTypes.shape({\n        breakPoints: PropTypes.any,\n        devicesToBreakPoints: PropTypes.any,\n      }),\n    };\n\n    static defaultProps = {\n      config: ReactResponsiveConnect.customConfig || defaultConfig,\n    };\n\n    constructor(props) {\n      super(props);\n      ReactResponsiveNextHoc.mediaQueriesMatchers = [];\n      const { config } = this.props;\n      const media = getMedia(config);\n\n      Object.keys(media).forEach((type) => {\n        const { mediaQuery, defaultWidth } = media[type];\n        const matcher = matchMediaQuery(mediaQuery, {\n          width: ReactResponsiveNextHoc.getBrowserWidth(),\n        });\n        ReactResponsiveNextHoc.mediaQueriesMatchers.push({\n          type,\n          matcher,\n          defaultWidth,\n        })\n      });\n      this.state = {\n        env: {},\n      };\n    }\n\n    componentDidMount() {\n      ReactResponsiveNextHoc.onResize();\n      this.onResizeHandler = debounce(ReactResponsiveNextHoc.onResize, 200);\n      window.addEventListener('resize', this.onResizeHandler, false);\n    }\n\n    componentWillUnmount() {\n      if (this.onResizeHandler) {\n        window.removeEventListener('resize', this.onResizeHandler, false);\n      }\n    }\n\n    static onResize() {\n      ReactResponsiveNextHoc.updateDeviceTypeByViewportSize();\n    }\n\n    static async getInitialProps(args = {}) {\n      let newProps = {\n        env: {},\n      };\n\n      if (args && args.req) {\n        const device = eval('require(\\'device\\')'); // it's not bundled to a browser js\n        const detectedMediaType = Cookies.load('detectedMediaType', args.req);\n        const detectedMediaWidth = Cookies.load('detectedMediaWidth', args.req);\n        const checkEnvironment = ({ headers = {} } = {}) => {\n          const ua = headers['user-agent'] || headers['User-Agent'] || '';\n          const detectedDevice = device(ua);\n          return {\n            userAgentMediaType: detectedDevice.type,\n            detectedMediaType: detectedMediaType || detectedDevice.type,\n            detectedMediaWidth: detectedMediaWidth\n            || ReactResponsiveNextHoc.getDefaultMediaWidthByType(detectedDevice.type),\n            detectedMediaModel: detectedDevice.model || null,\n          }\n        };\n        newProps.env = checkEnvironment(args.req);\n      } else {\n        newProps.env = {\n          userAgentMediaType: null,\n          detectedMediaType: null,\n          detectedMediaWidth: 0,\n          detectedMediaModel: null,\n        };\n      }\n      const newArgs = {\n        ...args,\n        ...newProps,\n      };\n      if (WrappedComponent.getInitialProps) {\n        newProps = {\n          ...newProps,\n          ...await WrappedComponent.getInitialProps(newArgs),\n        };\n      }\n      MediaQueryWrapper.fakeWidth = newProps.env.detectedMediaWidth;\n      return newProps;\n    }\n\n    static getDefaultMediaWidthByType(mediaType) {\n      const media = getMedia(ReactResponsiveConnect.customConfig || defaultConfig);\n      if (media[mediaType]) {\n        return media[mediaType].defaultWidth;\n      }\n      return media.desktop.defaultWidth;\n    }\n\n    static getBrowserWidth() {\n      if (process.browser) {\n        return window.innerWidth ||\n          document.documentElement.clientWidth ||\n          document.body.clientWidth;\n      }\n      return -1;\n    }\n\n    render() {\n      return <WrappedComponent {...this.state} {...this.props} />;\n    }\n  };\n"],"file":"react-responsive-connect.js"}